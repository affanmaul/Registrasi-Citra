import cv2
import numpy as np

# Buka file gambar.
img1_color = cv2.imread("im22.jpg") # Gambar yang akan disejajarkan.
img2_color = cv2.imread("im1.jpg") # Gambar referensi.

# Ubah ke grayscale.
img1 = cv2.cvtColor(img1_color, cv2.COLOR_BGR2GRAY)
img2 = cv2.cvtColor(img2_color, cv2.COLOR_BGR2GRAY)
height, width = img2.shape

# Buat detektor ORB dengan 5000 fitur.
orb_detector = cv2.ORB_create(5000)

# Temukan poin kunci dan deskriptor.
# Argumen pertama adalah gambar, argumen kedua adalah topeng
# (yang tidak diperlukan dalam kasus ini).
kp1, d1 = orb_detector.detectAndCompute(img1, None)
kp2, d2 = orb_detector.detectAndCompute(img2, None)

# Cocokkan fitur antara dua gambar.
# Kami membuat korek api Brute Force dengan
# Jarak Hamming sebagai mode pengukuran.
matcher = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck = True)

# Cocokkan dua set deskriptor.
matches = matcher.match(d1, d2)

# Urutkan kecocokan berdasarkan jarak Hamming mereka.
matches.sort(key = lambda x: x.distance)

# Ambil 90% pertandingan teratas ke depan.
matches = matches[:int(len(matches)*0.9)]
no_of_matches = len(matches)

# Tentukan matriks kosong bentuk no_of_matches * 2.
p1 = np.zeros((no_of_matches, 2))
p2 = np.zeros((no_of_matches, 2))

for i in range(len(matches)):
  p1[i, :] = kp1[matches[i].queryIdx].pt
  p2[i, :] = kp2[matches[i].trainIdx].pt

# Temukan matriks homografi.
homography, mask = cv2.findHomography(p1, p2, cv2.RANSAC)

# Gunakan matriks ini untuk mengubah
# gambar berwarna dengan gambar referensi.
transformed_img = cv2.warpPerspective(img1_color, 
                                      homography, (width, height))

# Simpan outputnya.
cv2.imwrite('Hasil Output.jpg', transformed_img)
