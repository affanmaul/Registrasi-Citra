import numpy as np
import cv2
from matplotlib import pyplot as plt

im1 = cv2.imread('fan10.jpg') # Gambar yang perlu didaftarkan.
im2 = cv2.imread('fan11.jpg') # gambar referensi

img1 = cv2.cvtColor(im1, cv2.COLOR_BGR2GRAY)
img2 = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)

# Mulai detektor ORB
orb = cv2.ORB_create(50)  #Pendaftaran bekerja dengan setidaknya 50 poin

# temukan poin kunci dan deskriptor dengan orb
kp1, des1 = orb.detectAndCompute(img1, None)  #kp1 --> daftar poin utama
kp2, des2 = orb.detectAndCompute(img2, None)

#Brute-Force matcher mengambil deskriptor dari satu fitur di set pertama dan adalah
#cocok dengan semua fitur lain di set kedua menggunakan beberapa perhitungan jarak.
# buat objek Matcher

matcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)

# Cocokkan deskriptor.
matches = matcher.match(des1, des2, None)  #Membuat daftar semua kecocokan, seperti poin utama

# Urutkan mereka dalam urutan jarak mereka.
matches = sorted(matches, key = lambda x:x.distance)

#Seperti kita menggunakan cv2.drawKeypoints() untuk menggambar keypoint,
#cv2.drawMatches() membantu kita menggambar kecocokan.
#https://docs.opencv.org/3.0-beta/modules/features2d/doc/drawing_function_of_keypoints_and_matches.html
# Gambar 10 pertandingan pertama.
img3 = cv2.drawMatches(im1,kp1, im2, kp2, matches[:10], None)

cv2.imshow("Gambar yang cocok", img3)
cv2.waitKey(0)

#Sekarang mari kita gunakan poin-poin penting ini untuk mendaftarkan dua gambar.
#Dapat digunakan untuk koreksi distorsi atau penyelarasan
#Untuk tugas ini kita akan menggunakan homografi.
# https://docs.opencv.org/3.4.1/d9/dab/tutorial_homography.html

# Ekstrak lokasi kecocokan yang baik.
# Untuk ini kita akan menggunakan RANSAC.
#RANSAC adalah singkatan dari RANdom SAmple Consensus,
#singkatnya dapat dianggap sebagai metode penolakan outlier untuk poin-poin utama.
#http://eric-yuan.me/ransac/
#RANSAC membutuhkan semua poin kunci diindeks, set pertama diindeks ke queryIdx
#Kedua diatur ke #trainIdx. 

points1 = np.zeros((len(matches), 2), dtype=np.float32)  #Mencetak array kosong dengan ukuran sama dengan (cocok, 2)
points2 = np.zeros((len(matches), 2), dtype=np.float32)

for i, match in enumerate(matches):
   points1[i, :] = kp1[match.queryIdx].pt    #memberikan indeks deskriptor dalam daftar deskriptor kueri
   points2[i, :] = kp2[match.trainIdx].pt    #memberikan indeks deskriptor dalam daftar deskriptor kereta

#Sekarang kami memiliki semua poin kunci yang bagus sehingga kami siap untuk homografi.
# Temukan homografi
#https://en.wikipedia.org/wiki/Homography_(computer_vision)
  
h, mask = cv2.findHomography(points1, points2, cv2.RANSAC)
 
 # Gunakan homografi
height, width, channels = im2.shape
im1Reg = cv2.warpPerspective(im1, h, (width, height))  #Menerapkan transformasi perspektif ke gambar.
   
print("Estimated homography : \n",  h)

cv2.imshow("Hasil Gambar Registrasi", im1Reg)
cv2.waitKey()
